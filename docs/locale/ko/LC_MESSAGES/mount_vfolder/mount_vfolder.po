# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Lablup Inc.
# This file is distributed under the same license as the Backend.AI Console
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Console User Guide 19.09\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-27 17:45+0900\n"
"PO-Revision-Date: 2023-03-25 23:38+0900\n"
"Last-Translator: Jonghyun Park <jpark@lablup.com>\n"
"Language: ko\n"
"Language-Team: Lablup\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../mount_vfolder/mount_vfolder.rst:5
msgid "Mounting Folders to a Compute Session"
msgstr "연산 세션에 폴더 마운트"

#: ../../mount_vfolder/mount_vfolder.rst:7
msgid ""
"When you start a compute session, the user has access to the "
"``/home/work/`` directory, and the normal directories and files created "
"under ``/home/work/`` will disappear when the compute session is "
"terminated. This is because compute sessions are dynamically created and "
"deleted based on the container. To preserve the data inside the container"
" independent of the life cycle of the container, a separate host folder "
"must be mounted into the container, and then files must be created within"
" the mounted folder. Backend.AI provides a function to mount storage "
"folders when creating a compute session."
msgstr ""
"연산 세션을 시작하면 사용자는 ``/home/work/`` 폴더에 접근 권한을 가지게 되는데, ``/home/work/`` 및 그 "
"하위에 생성된 일반 폴더와 파일은 연산 세션이 삭제되면 함께 사라지게 됩니다. 이는 연산 세션이 컨테이너에 기반하여 동적으로 "
"생성/삭제 되기 때문으로, 컨테이너 내부의 데이터를 컨테이너의 수명 주기와 상관없이 보존하려면 별도의 호스트 폴더를 컨테이너에 "
"마운트 한 뒤 마운트 된 폴더 내에 파일을 생성해야 합니다. Backend.AI 에서는 Storage 폴더 연산 세션 생성 시 "
"마운트 할 수 있는 기능을 제공하고 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:16
msgid ""
"Let's go to the Sessions page and click the START button to create a new "
"compute session. In the Folders to mount panel in the session creation "
"dialog, you can see a list of storage folders that can be mount. By "
"clicking the folder you want to mount, you can mount it. You can also "
"mount multiple folders simultaneously by clicking multiple items. In this"
" example, we will mount two folders, ``user1-ml-test`` and "
"``user2-vfolder``, and then create a compute session."
msgstr ""
"Sessions 페이지로 이동해서 START 버튼을 눌러 새로운 세션을 생성해 보겠습니다. 세션 생성 다이얼로그의 Folders "
"to mount 패널에서 사용자가 마운트 할 수 있는 폴더의 리스트를 볼 수 있습니다. 이 중에서 마운트 하고자 하는 폴더를 "
"클릭하여 추가할 수 있습니다. 여러 개를 클릭해서 여러 폴더를 동시에 마운트 할 수도 있습니다. 이 예제에서는 ``user1-ml-"
"test`` 와 ``user2-vfolder`` 두 개의 폴더를 마운트한 후 세션을 생성 하겠습니다."

#: ../../mount_vfolder/mount_vfolder.rst:-1
msgid "Launch a compute session with storage folders"
msgstr "스토리지 폴더를 마운트 하여 연산 세션 시작"

#: ../../mount_vfolder/mount_vfolder.rst:30
msgid ""
"Folders to mount only lists the data folders that the user can currently "
"mount. For example, project folders used by other projects are not "
"exposed in Folders to mount. The storage host for each folder is also "
"displayed under the folder's name."
msgstr ""
"Folders to mount 패널에는 현재 사용자가 마운트 가능한 데이터 폴더만 출력됩니다. 예를 들어, 다른 프로젝트에 속한 "
"프로젝트 폴더는 표시되지 않습니다. 각 폴더 이름 아래에서 해당 폴더가 속한 스토리지 호스트도 확인할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:35
msgid ""
"Now, open the terminal by clicking the terminal icon in the created "
"session. If you run ``ls`` command in the terminal, you can see that the "
"``user1-ml-test`` and ``user2-vfolder`` folders are mounted under the "
"home directory."
msgstr ""
"생성된 세션에서 터미널 아이콘을 클릭해 터미널 창을 띄워 봅시다. 터미널에서 ``ls`` 명령을 내려보면 ``user1-ml-"
"test`` 폴더와 ``user2-vfolder`` 폴더가 홈 디렉토리 하위에 마운트 되어 보이는 것을 알 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:40
msgid ""
"The selected folder, by default, will be mounted with its name under "
"``/home/work/`` inside the compute session. For example, if a folder's "
"name is ``test``, it is mounted on ``/home/work/test``. In case you want "
"to customize the mount path, write the absolute path in the Path & Alias "
"input field. If you write ``/workspace`` in the input field for the "
"``test`` folder, it will be mounted on ``/workspace`` inside the session."
" Writing a relative path will mount the folder under ``/home/work/`` with"
" the path."
msgstr ""
"선택한 폴더는 기본적으로 연산 세션 내의 ``/home/work/`` 하위에 폴더의 이름으로 마운트 됩니다. 예를 들어, 폴더의 "
"이름이 ``test`` 일 경우, ``/home/work/test`` 에 마운트 됩니다. 만약, 연산 세션 내 마운트 경로를 "
"변경하고 싶다면 Path & Alias 입력 필드에 절대 경로를 입력합니다. 만약, ``test`` 폴더의 마운트 경로를 "
"``/workspace`` 로 입력한 경우, ``test`` 폴더가 연산 세션 내의 ``/workspace`` 경로에 마운트 "
"됩니다. 상대 경로를 입력하면 ``/home/work/`` 아래에 마운트 됩니다."

#: ../../mount_vfolder/mount_vfolder.rst:48
msgid ""
"Let's create a ``test_file`` under ``user2-vfolder`` to see if the file "
"can be preserved after the compute session is terminated. The contents of"
" this file will be \"file inside user2-vfolder\"."
msgstr ""
"연산 세션이 삭제된 후에도 파일을 보존할 수 있는지 확인하기 위해 ``user2-vfolder`` 하위에 ``test_file`` "
"파일을 생성해 보겠습니다. 이 파일의 내용은 《file inside user2-vfolder》로 채우겠습니다."

#: ../../mount_vfolder/mount_vfolder.rst:-1
msgid "Mounted folders in terminal"
msgstr ""

#: ../../mount_vfolder/mount_vfolder.rst:55
msgid ""
"If you run ``ls`` command against ``user2-vfolder``, you can see that the"
" file was created successfully. Also note the contents of the file with "
"the ``cat`` command."
msgstr ""
"``user2-vfolder`` 를 대상으로 ``ls`` 명령을 실행해보면 파일이 잘 생성된 것을 확인할 수 있습니다. "
"``cat`` 명령으로 파일 내용도 확인해 보았습니다."

#: ../../mount_vfolder/mount_vfolder.rst:59
msgid ""
"Now delete the compute session and go to the Storage page. Locate the "
"``user2-vfolder folder``, open a file explorer and check that the file "
"``test_file`` exists. Click the file download button in Actions to "
"download the file to the local machine and open it to confirm that the "
"contents of the file are \"file inside user2-vfolder\"."
msgstr ""
"이제 세션을 삭제한 후 Data & Storage 페이지로 이동합니다. ``user2-vfolder`` 폴더를 찾아 파일 탐색기를 "
"열고 ``test_file`` 파일이 존재하는 것을 확인합니다. Actions의 파일 다운로드 버튼을 클릭하여 파일을 로컬 머신에 "
"받아 내용을 확인해서 파일의 내용이 \"file inside user2-vfolder\" 임을 확인합니다."

#: ../../mount_vfolder/mount_vfolder.rst:-1
msgid "Download icon in the folder explorer"
msgstr ""

#: ../../mount_vfolder/mount_vfolder.rst:68
msgid ""
"Like this, when creating a compute session, you can mount storage folders"
" and perform any file operations on those mounted folders to save data "
"even after the compute session termination."
msgstr ""
"이처럼 연산 세션을 생성할 때 폴더 마운트를 하고, 마운트 된 폴더에서 파일 작업을 수행하면 연산 세션이 종료된 이후에도 데이터를 "
"보존할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:76
msgid "Configure a compute session environment using an automount folder"
msgstr "자동 마운트 폴더를 이용하여 연산 세션 환경 구성하기"

#: ../../mount_vfolder/mount_vfolder.rst:78
msgid ""
"Sometimes you need a new program or library that is not pre-installed in "
"a compute session. In that case, you can install packages and configure a"
" certain environment regardless of the type of compute session by using "
"the Storage folder, which persists independent of session lifecycle, and "
"the :ref:`automount folder<automount-folder>`."
msgstr ""
"연산 세션에 사전 설치되어 있지 않은 새 프로그램이나 라이브러리를 필요로 할 때가 있습니다. 이런 경우, 연산 세션의 수명 주기와 "
"관계없는 Storage 폴더 특성과 :ref:`자동 마운트 폴더<automount-folder>` 를 이용해서 패키지를 설치하고, "
"연산 세션의 종류에 상관없이 일정한 환경을 구성할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:87
msgid "Install Python packages via pip"
msgstr "pip을 통한 파이썬 패키지 설치"

#: ../../mount_vfolder/mount_vfolder.rst:89
msgid ""
"Creating a folder named ``.local`` allows a user to install Python user "
"packages in that folder. This is because ``pip`` by default installs the "
"packages in the ``.local`` folder under the user's home folder (note that"
" automount folder is mounted under user's home folder). So, if you want "
"to install and keep the Python package ``tqdm`` regardless of the type of"
" computing environment, you can issue the following command in your "
"terminal:"
msgstr ""
"``.local`` 이라는 이름의 폴더를 생성하면 파이썬 사용자 패키지를 해당 폴더에 설치하고 공유할 수 있습니다. ``pip`` "
"으로 패키지를 설치하면 사용자 홈폴더 하위에 있는 ``.local`` 폴더에 패키지를 설치하기 때문입니다 (자동 마운트 폴더는 "
"사용자 홈폴더 하위에 마운트 됩니다). 따라서, 만약 ``tqdm`` 이라는 파이썬 패키지를 연산 환경과 상관없이 항상 설치되어 "
"있는 상태를 유지하려면 터미널에서 다음과 같은 명령을 내릴 수 있습니다:"

#: ../../mount_vfolder/mount_vfolder.rst:100
msgid ""
"After that, when a new compute session is created, the ``.local`` folder "
"where the ``tqdm`` package is installed is automatically mounted, so you "
"can use the ``tqdm`` package without reinstalling."
msgstr ""
"이후, 연산 세션을 새로 생성하게 되면 ``tqdm`` 패키지가 설키된 ``.local`` 폴더가 자동으로 마운트 되므로, "
"``tqdm`` 패키지를 다시 설치하지 않고 사용할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:106
msgid ""
"If you spawn multiple sessions that use different Python versions, there "
"may be compatibility issues with the packages. This can be circumvented "
"by branching ``PYTHONPATH`` environment variable via the ``.bashrc``. "
"This is because the user's ``pip`` package is installed in the path "
"specified in the ``PYTHONPATH``."
msgstr ""
"여러 파이썬 버전이나 다른 파이썬 버전을 사용하는 세션을 사용할 경우 패키지들의 호환성 문제가 있을 수 있습니다. 이는 "
"``.bashrc`` 편집기능을 통해 ``PYTHONPATH`` 를 분기하는 방식으로 적용할 수 있습니다. "
"``PYTHONPATH`` 환경 변수에 지정된 경로에 사용자 ``pip`` 패키지가 설치되기 때문입니다."

#: ../../mount_vfolder/mount_vfolder.rst:115
msgid "Install packages via Homebrew"
msgstr "Homebrew를 통해 패키지 설치"

#: ../../mount_vfolder/mount_vfolder.rst:117
msgid ""
"Package managers like Ubuntu ``apt`` or CentOS ``yum`` usually require "
"the ``root`` permission. For security reasons, ``sudo`` and ``root`` "
"accesses are blocked by default in Backend.AI's compute session (it may "
"be allowed depending on the configuration), so we recommend to use "
"`Homebrew on Linux <https://docs.brew.sh/Homebrew-on-Linux>`_ which does "
"not require ``sudo``."
msgstr ""
"Ubuntu의 ``apt`` 나 CentOS의 ``yum`` 같은 패키지 매니저는 일반적으로 ``root`` 권한을 필요로 합니다."
" Backend.AI의 연산 세션은 보안을 위해 ``sudo`` 권한 및 ``root`` 접근이 기본적으로 막혀 있기 때문에 "
"(설정에 따라 접근을 허용할 수도 있습니다), 패키지 설치를 위해 ``sudo`` 접근이 필요하지 않은 `Homebrew on "
"Linux <https://docs.brew.sh/Homebrew-on-Linux>`_ 사용을 권장하고 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:123
msgid "Homebrew can be configured as follows:"
msgstr "Homebrew는 다음과 같이 구성할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:125
msgid "Create ``.linuxbrew`` folder in Data & Storage page."
msgstr "Data & Storage 페이지에서 ``.linuxbrew`` 폴더 생성."

#: ../../mount_vfolder/mount_vfolder.rst:126
msgid ""
"Create a compute session (``.linuxbrew`` folder is automatically mounted "
"at ``/home/linuxbrew/.linuxbrew``)."
msgstr "연산 세션을 생성(``.linuxbrew`` 폴더가 자동으로 ``/home/linuxbrew/.linuxbrew`` 위치에 마운트)."

#: ../../mount_vfolder/mount_vfolder.rst:128
msgid "Install Homebrew in the compute session, if not yet installed."
msgstr "연산 세션 내에서 Homebrew 설치(아직 설치하지 않은 경우)."

#: ../../mount_vfolder/mount_vfolder.rst:134
msgid "Homebrew packages can be installed like:"
msgstr "Homebrew 패키지는 다음과 같이설치할 수 있습니다:"

#: ../../mount_vfolder/mount_vfolder.rst:142
msgid ""
"``brew`` installs packages under ``/home/linuxbrew/.linuxbrew`` which is "
"automatically mounted when ``.linuxbrew`` folder exists. So, if you "
"create a automount folder named ``.linuxbrew``, Homebrew packages can be "
"kept after the compute session is destroyed and then reused for the next "
"compute session."
msgstr ""
"``brew`` 는 패키지를 ``/home/linuxbrew/.linuxbrew`` 디렉토리 하위에 설치하는데, "
"``.linuxbrew`` 라는 데이터 폴더가 있다면 연산 세션 생성 시 자동으로 그 위치에 마운트합니다. 따라서, "
"``.linuxbrew`` 라는 자동 마운트 폴더를 생성해두면 연산 세션을 삭제하고 새로운 연산 세션을 생성하더라도 기존에 설치했던"
" Homebrew 패키지를 다시 사용할 수 있습니다."

#~ msgid ""
#~ "Every Vfolder in folder to mount "
#~ "list is visible if its storage "
#~ "host is added to allowed hosts. "
#~ "Only administrator can change allowed "
#~ "hosts. In the image above, the "
#~ "user have an access to "
#~ "``local:volume1``."
#~ msgstr ""
#~ "folder to mount 리스트에 있는 모든 "
#~ "Vfolder는 허용된 스토리지 호스트에 추가된 경우에만 "
#~ "보여지게 됩니다. 오직 관리자만 허용된 스토리지 호스트 "
#~ "변경이 가능합니다. 위의 이미지에서 사용자는 "
#~ "``local:volume1`` 하위의 Vfolder에 접근이 가능한 "
#~ "것을 확인할 수 있습니다. "

#~ msgid ""
#~ "The selected folder will be mounted "
#~ "with its name under ``/home/work/`` "
#~ "inside the compute session. For example,"
#~ " if a folder's name is ``test``, "
#~ "it is mounted on ``/home/work/test``. If"
#~ " you want to change the name of"
#~ " the folder under ``/home/work/``, fill "
#~ "in Alias. In this case, it is "
#~ "mounted with the name written in "
#~ "Alias."
#~ msgstr ""
#~ "선택한 폴더는 연산 세션 내의 ``/home/work/`` "
#~ "하위에 폴더의 이름으로 마운트 됩니다. 예를 들어, "
#~ "폴더의 이름이 ``test`` 일 경우, "
#~ "``/home/work/test`` 에 마운트 됩니다. 만약, 연산"
#~ " 세션 내에 마운트 되는 폴더의 이름을 변경하고 "
#~ "싶다면 Alias를 입력하면 됩니다. 이 경우 "
#~ "``/home/work/`` 하위에 Alias에 기록한 이름으로 마운트"
#~ " 됩니다."

#~ msgid "Install Homebrew on Linux"
#~ msgstr "Homebrew on Linux 설치"

#~ msgid "Install package"
#~ msgstr "패키지 설치"

#~ msgid ""
#~ "You can manage various settings using"
#~ " the automount folder in the same "
#~ "way as above. More details can be"
#~ " found on the `Backend.AI wiki "
#~ "<https://github.com/lablup/backend.ai/blob/master/docs/install"
#~ "/install-user-programs.rst>`_."
#~ msgstr ""
#~ "위와 같은 방식으로 자동 마운트 폴더를 이용하여 "
#~ "다양한 설정 관리가 가능합니다. 보다 자세한 사항은 "
#~ "`Backend.AI 위키 "
#~ "<https://github.com/lablup/backend.ai/blob/master/docs/install"
#~ "/install-user-programs.rst>`_ 에서 확인할 수 "
#~ "있습니다."

