# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Lablup Inc.
# This file is distributed under the same license as the Backend.AI Console
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Console User Guide 19.09\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-15 08:59+0900\n"
"PO-Revision-Date: 2020-06-15 09:05+0900\n"
"Last-Translator: Jonghyun Park <jpark@lablup.com>\n"
"Language: ko\n"
"Language-Team: Lablup\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.3.1\n"

#: ../../mount_vfolder/mount_vfolder.rst:5
msgid "Create a Compute Session with Mounted Folders"
msgstr "폴더를 마운트 하여 연산 세션 생성"

#: ../../mount_vfolder/mount_vfolder.rst:7
msgid ""
"When you start a compute session, the user has access to the ``/home/work/`` "
"directory, and the normal directores and files created under ``/home/work/`` "
"will disappear when the compute session is destroyed. This is because compute "
"sessions are dynamically created and deleted based on the container. To "
"preserve the data inside the container independent of the life cycle of the "
"container, a separate host folder must be mounted into the container, and then "
"files must be created within the mounted folder. Backend.AI provides a "
"function to mount storage folders when creating a compute session."
msgstr ""
"연산 세션을 시작하면 사용자는 ``/home/work/`` 폴더에 접근 권한을 가지게 되는"
"데, ``/home/work/`` 및 그 하위에 생성된 일반 폴더와 파일은 연산 세션이 삭제되"
"면 함께 사라지게 됩니다. 이는 연산 세션이 컨테이너에 기반하여 동적으로 생성/삭"
"제 되기 때문으로, 컨테이너 내부의 데이터를 컨테이너의 수명 주기와 상관없이 보존"
"하려면 별도의 호스트 폴더를 컨테이너에 마운트 한 뒤 마운트 된 폴더 내에 파일을 "
"생성해야 합니다. Backend.AI에서는 Storage 폴더 연산 세션 생성 시 마운트 할 수 "
"있는 기능을 제공하고 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:16
msgid ""
"Let's go to the Sessions page and click the START button to create a new "
"compute session. In the session create dialog, click Folders to mount to see a "
"list of storage folders that a user can mount. Among them, you can add them by "
"clicking the folder you want to mount. You can also mount multiple folders "
"simultaneously by clicking multiple items. In this example, we will mount two "
"folders, ``user1-ml-test`` and ``user2-vfolder``, and then create a compute "
"session."
msgstr ""
"Sessions 페이지로 이동해서 START 버튼을 눌러 새로운 세션을 생성해 보겠습니다. "
"세션 생성 다이얼로그에서 Folders to mount를 클릭하면 현재 사용자가 마운트 할 "
"수 있는 폴더의 리스트를 볼 수 있습니다. 이 중에서 마운트 하고자 하는 폴더를 클"
"릭하여 추가할 수 있습니다. 여러 개를 클릭해서 여러 폴더를 동시에 마운트 할 수"
"도 있습니다. 이 예제에서는 ``user1-ml-test`` 와 ``user2-vfolder`` 두 개의 폴더"
"를 마운트한 후 세션을 생성 하겠습니다."

#: ../../mount_vfolder/mount_vfolder.rst:28
msgid ""
"Now, open the terminal by clicking the terminal icon in the created session. "
"If you run ``ls`` command in the terminal, you can see that the ``user1-ml-"
"test`` and ``user2-vfolder`` folders are mounted under the home directory. "
"Let's create a ``test_file`` under ``user2-vfolder`` to see if the file can be "
"preserved after the compute session is destroyed. The contents of this file "
"will filled with \"file inside user2-vfolder\"."
msgstr ""
"생성된 세션에서 터미널 아이콘을 클릭해 터미널 창을 띄워 봅시다. 터미널에서 "
"``ls`` 명령을 내려보면 ``user1-ml-test`` 폴더와 ``user2-vfolder`` 폴더가 홈 디"
"렉토리 하위에 마운트 되어 보이는 것을 알 수 있습니다. 연산 세션이 삭제된 후에"
"도 파일을 보존할 수 있는지 확인하기 위해 ``user2-vfolder`` 하위에 "
"``test_file`` 파일을 생성해 보겠습니다. 이 파일의 내용은 \"file inside user2-"
"vfolder\"로 채우겠습니다."

#: ../../mount_vfolder/mount_vfolder.rst:38
msgid ""
"If you run ``ls`` command against ``user2-vfolder``, you can see that the file "
"was created successfully. Also note the contents of the file with the ``cat`` "
"command."
msgstr ""
"``user2-vfolder`` 를 대상으로 ``ls`` 명령을 실행해보면 파일이 잘 생성된 것을 확"
"인할 수 있습니다. ``cat`` 명령으로 파일 내용도 확인해 보았습니다."

#: ../../mount_vfolder/mount_vfolder.rst:42
msgid ""
"Now delete the compute session and go to the Storage page. Locate the ``user2-"
"vfolder folder``, open a file explorer and check that the file ``test_file`` "
"exists. Click the file download button in Actions to download the file to the "
"local machine and open it in an editor to confirm that the contents of the "
"file are \"file inside user2-vfolder\"."
msgstr ""
"이제 세션을 삭제한 후 Data & Storage 페이지로 이동합니다. ``user2-vfolder`` 폴"
"더를 찾아 파일 탐색기를 열고 ``test_file`` 파일이 존재하는 것을 확인합니다. "
"Actions의 파일 다운로드 버튼을 클릭하여 파일을 로컬 머신에 받아 내용을 확인해"
"서 파일의 내용이 \"file inside user2-vfolder\" 임을 확인합니다."

#: ../../mount_vfolder/mount_vfolder.rst:51
msgid ""
"Like this, when creating a compute session, you can mount storage folders and "
"perform any file operations on those mounted folders to save data even after "
"the compute session termination."
msgstr ""
"이처럼 연산 세션을 생성할 때 폴더 마운트를 하고, 마운트 된 폴더에서 파일 작업"
"을 수행하면 연산 세션이 종료된 이후에도 데이터를 보존할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:59
msgid "Configuring a compute session environment using an automount folder"
msgstr "자동 마운트 폴더를 이용하여 연산 세션 환경 구성하기"

#: ../../mount_vfolder/mount_vfolder.rst:61
msgid ""
"Sometimes you need a new program or library that is not pre-installed in a "
"compute session. In that case, you can install packages and configure a "
"certain environment regardless of the type of compute session by using the "
"Storage folder, which persists independent of session lifecycle, and the :ref:"
"`automount folder<automount-folder>`."
msgstr ""
"연산 세션에 사전 설치되어 있지 않은 새 프로그램이나 라이브러리를 필요로 할 때"
"가 있습니다. 이런 경우, 연산 세션의 수명 주기와 관계없는 Storage 폴더 특성과 :"
"ref:`자동 마운트 폴더<automount-folder>` 를 이용해서 패키지를 설치하고, 연산 세"
"션의 종류에 상관없이 일정한 환경을 구성할 수 있습니다."

#: ../../mount_vfolder/mount_vfolder.rst:67
msgid "**Install Python packages via pip**"
msgstr "**pip을 통한 파이썬 패키지 설치**"

#: ../../mount_vfolder/mount_vfolder.rst:69
msgid ""
"Creating a folder named ``.local`` allows a user to install Python user "
"packages in that folder. This is because installing a package with the ``–-"
"user`` option appended to ``pip`` installs the package in the ``.local`` "
"folder under the user's home folder (note that automount folder is mounted "
"under user's home folder). So, if you want to install and keep the Python "
"package ``tqdm`` regardless of the type of computing environment, you can "
"issue the following command in your terminal:"
msgstr ""
"``.local`` 이라는 이름의 폴더를 생성하면 파이썬 사용자 패키지를 해당 폴더에 설"
"치하고 공유할 수 있습니다. ``pip`` 에 ``–-user`` 옵션을 붙여 패키지를 설치하면 "
"사용자 홈폴더 하위에 있는 ``.local`` 폴더에 패키지를 설치하기 때문입니다 (자동 "
"마운트 폴더는 사용자 홈폴더 하위에 마운트 됩니다). 따라서, 만약 ``tqdm`` 이라"
"는 파이썬 패키지를 연산 환경과 상관없이 항상 설치되어 있는 상태를 유지하려면 터"
"미널에서 다음과 같은 명령을 내릴 수 있습니다:"

#: ../../mount_vfolder/mount_vfolder.rst:81
msgid ""
"After that, when a new compute session is created, the ``.local`` folder where "
"the ``tqdm`` package is installed is automatically mounted, so you can use the "
"``tqdm`` package without reinstalling."
msgstr ""
"이후, 연산 세션을 새로 생성하게 되면 ``tqdm`` 패키지가 설키된 ``.local`` 폴더"
"가 자동으로 마운트 되므로, ``tqdm`` 패키지를 다시 설치하지 않고 사용할 수 있습"
"니다."

#: ../../mount_vfolder/mount_vfolder.rst:87
msgid ""
"If you spawn multiple sessions that uses multiple Python versions, there may "
"be compatibility issues with the packages. This can be circumvented by "
"branching ``PYTHONPATH`` environment variable via the ``.bashrc``. This is "
"because the user's ``pip`` package is installed in the path specified in the "
"``PYTHONPATH``."
msgstr ""
"여러 파이썬 버전이나 다른 파이썬 버전을 사용하는 세션을 사용할 경우 패키지들의 "
"호환성 문제가 있을 수 있습니다. 이는 ``.bashrc`` 편집기능을 통해 "
"``PYTHONPATH`` 를 분기하는 방식으로 적용할 수 있습니다. ``PYTHONPATH`` 환경 변"
"수에 지정된 경로에 사용자 ``pip`` 패키지가 설치되기 때문입니다."

#: ../../mount_vfolder/mount_vfolder.rst:93
msgid "**Install packages via Homebrew**"
msgstr "**Homebrew를 통해 패키지 설치**"

#: ../../mount_vfolder/mount_vfolder.rst:95
msgid ""
"Package managers like Ubuntu's ``apt`` or CentOS's ``yum`` usually require "
"``sudo`` permissions. For security, ``sudo`` and ``root`` accesses are blocked "
"by default in Backend.AI's compute session (it may allowed depending on the "
"configuration), so we recommend to use `Homebrew on Linux <https://docs.brew."
"sh/Homebrew-on-Linux>`_ which does not require ``sudo``. Homebrew can be "
"installed and used in the following ways:"
msgstr ""
"Ubuntu의 ``apt`` 나 CentOS의 ``yum`` 같은 패키지 매니저는 일반적으로 ``sudo`` "
"권한을 필요로 합니다. Backend.AI의 연산 세션은 보안을 위해 ``sudo`` 권한 및 "
"``root`` 접근이 기본적으로 막혀 있기 때문에 (설정에 따라 접근을 허용할 수도 있"
"습니다), 패키지 설치를 위해서는 `Homebrew on Linux <https://docs.brew.sh/"
"Homebrew-on-Linux>`_ 사용을 권장하고 있습니다. Homebrew는 다음과 같은 방식으로 "
"설치 및 사용할 수 있습니다:"

#: ../../mount_vfolder/mount_vfolder.rst:102
msgid "Create ``.linuxbrew`` folder in Data & Storage page"
msgstr "Data & Storage 페이지에서 ``.linuxbrew`` 폴더 생성"

#: ../../mount_vfolder/mount_vfolder.rst:103
msgid "Create a compute session (``.linuxbrew`` folder is automatically mounted)"
msgstr "연산 세션을 생성 (``.linuxbrew`` 폴더가 자동으로 마운트)"

#: ../../mount_vfolder/mount_vfolder.rst:104
msgid "Install Homebrew on Linux"
msgstr "Homebrew on Linux 설치"

#: ../../mount_vfolder/mount_vfolder.rst:112
msgid "Install package"
msgstr "패키지 설치"

#: ../../mount_vfolder/mount_vfolder.rst:119
msgid ""
"You can manage various settings using the automount folder in the same way as "
"above. More details can be found on the `Backend.AI wiki <https://github.com/"
"lablup/backend.ai/blob/master/docs/install/install-user-programs.rst>`_."
msgstr ""
"위와 같은 방식으로 자동 마운트 폴더를 이용하여 다양한 설정 관리가 가능합니다. "
"보다 자세한 사항은 `Backend.AI 위키 <https://github.com/lablup/backend.ai/blob/"
"master/docs/install/install-user-programs.rst>`_ 에서 확인할 수 있습니다."
